{"version":3,"sources":["firebase.js","AddNote.js","NoteLists.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","process","APIKEY","authDomain","AUTH_DOMAIN","databaseURL","DATABASE_URL","projectId","PROJECTID","storageBucket","STORAGE_BUCKET","messagingSenderId","MESSAGE_SENDER_ID","appId","APP_ID","measurementId","MEASUREMENT_ID","firebase","initializeApp","AddNoteDiv","styled","div","InputTitle","input","BodyTextArea","textarea","Button","AddNote","useState","title","setTitle","body","setBody","value","onChange","e","target","onClick","firestore","collection","add","ListsDiv","ListItemDiv","ListTitleDiv","ListItemDetailDiv","p","ListItemDeleteButton","button","NoteLists","lists","setLists","useEffect","onSnapshot","snapshot","docs","map","doc","id","data","useLists","list","delete","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TAIMA,G,MAAiB,CACrBC,OAAO,GAAD,OAAKC,gJAAYC,QACvBC,WAAW,GAAD,OAAKF,gJAAYG,aAC3BC,YAAY,GAAD,OAAKJ,gJAAYK,cAC5BC,UAAU,GAAD,OAAKN,gJAAYO,WAC1BC,cAAc,GAAD,OAAKR,gJAAYS,gBAC9BC,kBAAkB,GAAD,OAAKV,gJAAYW,mBAClCC,MAAM,GAAD,OAAKZ,gJAAYa,QACtBC,cAAc,GAAD,OAAKd,gJAAYe,kBAGhCC,IAASC,cAAcnB,GAGRkB,QAAf,E,wtBCfA,IAAME,EAAaC,IAAOC,IAAV,KAQVC,EAAaF,IAAOG,MAAV,KAQVC,EAAeJ,IAAOK,SAAV,KASZC,EAASN,IAAOC,IAAV,KAmCGM,EA1BC,WAAO,IAAD,EACMC,mBAAS,IADf,mBACbC,EADa,KACNC,EADM,OAEIF,mBAAS,IAFb,mBAEbG,EAFa,KAEPC,EAFO,KAiBpB,OACE,kBAACb,EAAD,KACE,kBAACG,EAAD,CAAYW,MAAOJ,EAAOK,SAAU,SAAAC,GAAC,OAAIL,EAASK,EAAEC,OAAOH,UAC3D,kBAACT,EAAD,CAAcS,MAAOF,EAAMG,SAAU,SAAAC,GAAC,OAAIH,EAAQG,EAAEC,OAAOH,UAC3D,kBAACP,EAAD,CAAQW,QAjBI,WACdpB,EACGqB,YACAC,WAAW,SACXC,IAAI,CACHX,QACAE,SAGJD,EAAS,IACTE,EAAQ,MAON,c,g2BCtDN,IAAMS,EAAWrB,IAAOC,IAAV,KAQRqB,EAActB,IAAOC,IAAV,KAMXsB,EAAevB,IAAOC,IAAV,KAOZuB,EAAoBxB,IAAOyB,EAAV,KAQjBC,EAAuB1B,IAAO2B,OAAV,KAgC1B,IA0BeC,EA1BG,WAChB,IAAMC,EArBR,WAAqB,IAAD,EACQrB,mBAAS,IADjB,mBACXqB,EADW,KACJC,EADI,KAiBlB,OAdAC,qBAAU,WACRlC,EACGqB,YACAC,WAAW,SACXa,YAAW,SAAAC,GACV,IAAMJ,EAAQI,EAASC,KAAKC,KAAI,SAAAC,GAAG,oBACjCC,GAAID,EAAIC,IACLD,EAAIE,WAGTR,EAASD,QAEZ,IAEIA,EAIOU,GAUd,OACE,kBAAClB,EAAD,KACGQ,EAAMM,KAAI,SAAAK,GACT,OACE,kBAAClB,EAAD,KACE,kBAACC,EAAD,KAAeiB,EAAK/B,OACpB,kBAACe,EAAD,KAAoBgB,EAAK7B,MACzB,kBAACe,EAAD,CAAsBT,QAAS,kBAflBoB,EAeuCG,EAAKH,QAdjExC,EACGqB,YACAC,WAAW,SACXiB,IAAIC,GACJI,SALkB,IAAAJ,W,MCnDVK,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,+CACA,6DACA,kBAAC,EAAD,MACA,wCACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb6756cd.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\n\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: `${process.env.APIKEY}`,\n  authDomain: `${process.env.AUTH_DOMAIN}`,\n  databaseURL: `${process.env.DATABASE_URL}`,\n  projectId: `${process.env.PROJECTID}`,\n  storageBucket: `${process.env.STORAGE_BUCKET}`,\n  messagingSenderId: `${process.env.MESSAGE_SENDER_ID}`,\n  appId: `${process.env.APP_ID}`,\n  measurementId: `${process.env.MEASUREMENT_ID}`\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nexport default firebase;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport firebase from \"./firebase\";\nconst AddNoteDiv = styled.div`\n  display: flex;\n  width: 40%;\n  flex-direction: column;\n  margin: 30px auto;\n  padding: 5px;\n`;\n\nconst InputTitle = styled.input`\n  padding: 0.5em;\n  border: none;\n  background: #f4f4;\n  margin-bottom: 10px;\n  border-radius: 3px;\n`;\n\nconst BodyTextArea = styled.textarea`\n  padding: 0.5em;\n  border: none;\n  height: 80px;\n  background: #f4f4;\n  margin-bottom: 10px;\n  border-radius: 3px;\n`;\n\nconst Button = styled.div`\n  background: blue;\n  color: white;\n  font-size: 1em;\n  padding: 10px;\n  cursor: pointer;\n  border-radius: 3px;\n`;\n\nconst AddNote = () => {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n\n  const addNote = () => {\n    firebase\n      .firestore()\n      .collection(\"notes\")\n      .add({\n        title,\n        body\n      });\n\n    setTitle(\"\");\n    setBody(\"\");\n  };\n\n  return (\n    <AddNoteDiv>\n      <InputTitle value={title} onChange={e => setTitle(e.target.value)} />\n      <BodyTextArea value={body} onChange={e => setBody(e.target.value)} />\n      <Button onClick={addNote}>Add Note</Button>\n    </AddNoteDiv>\n  );\n};\n\nexport default AddNote;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport firebase from \"./firebase\";\n\nconst ListsDiv = styled.div`\n  width: 40%;\n  height: 100%;\n  background: #dedede;\n  margin: 30px auto;\n  padding: 20px;\n`;\n\nconst ListItemDiv = styled.div`\n  background: #b2c4db;\n  border-radius: 5px;\n  position: relative;\n`;\n\nconst ListTitleDiv = styled.div`\n  font-size: 24px;\n  color: black;\n  font-weight: bold;\n  margin: 3px;\n`;\n\nconst ListItemDetailDiv = styled.p`\n  font-size: 18px;\n  color: black;\n  margin: 3px;\n  max-height: 80px;\n  overflow: auto;\n`;\n\nconst ListItemDeleteButton = styled.button`\n  border-radius: 5px;\n  background: #c26c61;\n  color: white;\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  top: 5px;\n  right: 10px;\n  outline: none;\n`;\n\nfunction useLists() {\n  const [lists, setLists] = useState([]);\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"notes\")\n      .onSnapshot(snapshot => {\n        const lists = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n\n        setLists(lists);\n      });\n  }, []);\n\n  return lists;\n}\n\nconst NoteLists = () => {\n  const lists = useLists();\n\n  const handleOnDelete = id => {\n    firebase\n      .firestore()\n      .collection(\"notes\")\n      .doc(id)\n      .delete();\n  };\n\n  return (\n    <ListsDiv>\n      {lists.map(list => {\n        return (\n          <ListItemDiv>\n            <ListTitleDiv>{list.title}</ListTitleDiv>\n            <ListItemDetailDiv>{list.body}</ListItemDetailDiv>\n            <ListItemDeleteButton onClick={() => handleOnDelete(list.id)} />\n          </ListItemDiv>\n        );\n      })}\n    </ListsDiv>\n  );\n};\n\nexport default NoteLists;\n","import React from \"react\";\nimport AddNote from \"./AddNote\";\nimport NoteLists from \"./NoteLists\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Note Taking App</h2>\n      <p>using React Hooks and Firebase</p>\n      <AddNote />\n      <h3>Notes : </h3>\n      <NoteLists />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}